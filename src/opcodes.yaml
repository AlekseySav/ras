simsiz (wl.):
  "":     opsize, byte(n)

extsim (.):
  "":     byte(0x0f), byte(n)

longsz (.):
  "":     size = 2, opsize, byte(n)

string (bwl):
  "":     opsize, byte(n | size)

setflg (.,n):
  mb:     adsize, byte(0x0f), byte(n), mr(0)

sjumps (.,n):
  db:     byte(n), db(i0)

cjumps (.,n):
  db:     byte(n), db(i0)
  dw:     byte(0x0f), byte(n + 0x10), dw(i0)

addsub (bwl.,s,s):
  rr,mr:
  mr,rr:  opsize, adsize, byte(size | n << 3 | cnt << 1), mr(rr)
  bb,al:  byte(0x04 | n << 3), byte(i0)
  ib,mw:  opsize, adsize, byte(0x83), mr(n), ib(i0)
  im,ax:  opsize, byte(0x05 | n << 3), im(i0)
  im,mr:  opsize, adsize, byte(0x80 | size), mr(n), im(i0)

shlshr (bwl.,n,s):
  1,mr:   opsize, adsize, byte(0xd0 | size), mr(n)
  cl,mr:  opsize, adsize, byte(0xd2 | size), mr(n)
  ib,mr:  opsize, adsize, byte(0xc0 | size), mr(n), ib(i0)

divmul (bwl.,s):
  mr:     opsize, adsize, byte(0xf6 | size), mr(n)

incdec (bwl.,s):
  rw:     opsize, byte(0x40 | rr | n << 3)
  mr:     opsize, adsize, byte(0xfe | size), mr(n)

load0r (.,n):
  mw:     adsize, byte(0x0f), byte(0), mr(n)

load0m (.,n):
  mm:     adsize, byte(0x0f), byte(0), mr(n)

load1r (.,n):
  mw:     adsize, byte(0x0f), byte(1), mr(n)

load1m (.,n):
  mm:     adsize, byte(0x0f), byte(1), mr(n)

movxsz (bw.,s,n):
  mb,rs:  adsize, byte(0x0f), byte(0xb6 | n), mr(rr)
  ms,rl:
  mb,rl:  size = 2, opsize, adsize, byte(0x0f), byte(0xb6 | 1 - cnt | n), mr(rr)

memory (wl.,n,s):
  mw,rw:  opsize, adsize, byte(n), mr(rr)

extmem (wl.,n,s):
  mw,rw:  opsize, adsize, byte(0x0f), byte(n), mr(rr)

extreg (l.,s):
  rl:     opsize, byte(0x0f), byte(n | rr)

bitset (wl.,s,s):
  ub,mw:  opsize, adsize, byte(0x0f), byte(0xba), mr(n), ub(i0)
  rw,mw:  opsize, adsize, byte(0x0f), byte(0x83 | n << 3), mr(rr)

aamaad (.[,n]):
  "":     byte(n), ib(10)
  ib:     byte(n), ib(i0)

return (.[,n]):
  "":     byte(n | 1)
  im:     byte(n), word(i0)

ljump (.,n[,n]):
  mr:     adsize, byte(0xff), mr(n)
  m0,m0:  byte((n == 5) * 0x50 + 0x9a), word(i1), word(i0)

jmp (.,n):
  db:     byte(0xeb), db(i0)
  dw:     byte(0xe9), dw(i0)
  mr:     adsize, byte(0xff), mr(4)

call (.,n):
  dw:     byte(0xe8), dw(i0)
  mr:     adsize, byte(0xff), mr(2)

enter (.,n,n):
  im,ub:  byte(0xc8), word(i0), byte(i1)

in (bwl.[,n,s]):
  "":
  dx,al:
  dx,ax:  opsize, byte(0xec | size)
  ub,al:
  ub,ax:
  m0:
  ub:     opsize, byte(0xe4 | size), ub(i0)

out (bwl.[,s,n]):
  "":
  al,dx:
  ax,dx:  opsize, byte(0xee | size)
  al,ub:
  ax,ub:  opsize, byte(0xe6 | size), ub(i1)
  m0:
  ub:     opsize, byte(0xe6 | size), ub(i0)

imul (bwl.,s[,n,n]):
  mr:     opsize, adsize, byte(0xf6 | size), mr(5)
  mw,rw:  opsize, adsize, byte(0x0f), byte(0xaf), mr(rr)
  ib,mm,rw:
  ib,xw:  opsize, adsize, byte(0x6b), mr(rr), ib(i0)
  im,mm,rw:
  im,xw:  opsize, adsize, byte(0x69), mr(rr), im(i0)

test (bwl.,s,s):
  bb,al:
  im,ax:  opsize, byte(0xa8 | size), im(i0)
  al,bb:
  ax,im:  opsize, byte(0xa8 | size), im(i1)
  im,mr:  opsize, adsize, byte(0xf6 | size), mr(0), im(i0)
  rr,mr:
  mr,rr:  opsize, adsize, byte(0x84 | size), mr(rr)

mov (bwl.,s,s):
  m0,al:
  m0,ax:  opsize, adsize, byte(0xa0 | size), mrdisp()
  al,m0:
  ax,m0:  opsize, adsize, byte(0xa2 | size), mrdisp()
  im,rr:  opsize, byte(0xb0 | size << 3 | rr), im(i0)
  rr,mr:
  mr,rr:  opsize, adsize, byte(0x88 | cnt << 1 | size), mr(rr)
  im,mr:  opsize, adsize, byte(0xc6 | size), mr(0), im(i0)
  sr,ms:
  ms,sr:  adsize, byte(0x8c | cnt << 1), mr(sr)
  cr,xl:
  xl,cr:  byte(0x0f), byte(0x20 | cnt << 1), mr(cr)
  dr,xl:
  xl,dr:  byte(0x0f), byte(0x21 | cnt << 1), mr(dr)
  tr,xl:
  xl,tr:  byte(0x0f), byte(0x24 | cnt << 1), mr(tr)

xchg (bwl.,s,s):
  ax,rr:
  rr,ax:  opsize, byte(0x90 | rr)
  mr,rr:
  rr,mr:  opsize, adsize, byte(0x86 | size), mr(rr)

push (wl.,n):
  rw:     opsize, byte(0x50 | rr)
  fs:     word(0xa00f)
  gs:     word(0xa80f)
  sr:     byte(0x06 | sr << 3)
  ib:     byte(0x6a), ib(i0)
  im:     byte(0x68), word(i0)
  mw:     opsize, adsize, byte(0xff), mr(6)

pop (wl.,n):
  rw:     opsize, byte(0x58 | rr)
  fs:     word(0xa10f)
  gs:     word(0xa90f)
  sr:     byte(0x07 | sr << 3)
  mw:     opsize, adsize, byte(0x8f), mr(0)

seg (.,n):
  ds:
  ss:
  cs:
  es:     byte(0x26 | sr << 3)
  gs:
  fs:     byte(0x60 | sr)

int (.,n):
  ub:     byte(0xcd), ub(i0)

sys (.,n):
  m0:     word(0xcd20), ub(i0)

cmpxchg (bwl.,s,s):
  rb,mb:
  rw,mw:  opsize, adsize, byte(0x0f), byte(0xb0 | cnt), mr(rr)

opcodes:
  .error: pseudo
  .mut:   pseudo
  .if:    pseudo
  .else:  pseudo
  .endif: pseudo
  .byte:  pseudo
  .word:  pseudo
  .long:  pseudo
  .ascii: pseudo
  .fill:  pseudo
  .align: pseudo

  daa:    simple 27
  das:    simple 2f
  aaa:    simple 37
  aas:    simple 3f
  nop:    simple 90
  cbw:    simple 98
  cwd:    simple 99
  wait:   simple 9b
  sahf:   simple 9e
  lahf:   simple 9f
  leave:  simple c9
  int3:   simple cc
  into:   simple ce
  xlat:   simple d7
  lock:   simple f0
  repne:  simple f2
  repe:   simple f3
  rep:    simple f3
  hlt:    simple f4
  cmc:    simple f5
  clc:    simple f8
  stc:    simple f9
  cli:    simple fa
  sti:    simple fb
  cld:    simple fc
  std:    simple fd

  pusha:  simsiz 60
  popa:   simsiz 61
  pushf:  simsiz 9c
  popf:   simsiz 9d
  iret:   simsiz cf

  clts:   extsim 06
  invd:   extsim 08
  wbinvd: extsim 09

  cwde:   longsz 98
  cdq:    longsz 99

  ins:    string 6c
  outs:   string 6e
  movs:   string a4
  cmps:   string a6
  stos:   string aa
  lods:   string ac
  scas:   string ae

  seto:   setflg 90
  setno:  setflg 91
  setb:   setflg 92
  setc:   setflg 92
  setnae: setflg 92
  setae:  setflg 93
  setnb:  setflg 93
  setnc:  setflg 93
  sete:   setflg 94
  setz:   setflg 94
  setne:  setflg 95
  setnz:  setflg 95
  setbe:  setflg 96
  setna:  setflg 96
  sets:   setflg 98
  setns:  setflg 99
  setp:   setflg 9a
  setpe:  setflg 9a
  setnp:  setflg 9b
  setpo:  setflg 9b
  setl:   setflg 9c
  setnge: setflg 9c
  setge:  setflg 9d
  setnl:  setflg 9d
  setle:  setflg 9e
  setng:  setflg 9e
  setg:   setflg 9f
  setnle: setflg 9f

  loopne: sjumps e0
  loope:  sjumps e1
  loop:   sjumps e2
  jcxz:   sjumps e3

  jo:     cjumps 70
  jno:    cjumps 71
  jb:     cjumps 72
  jnae:   cjumps 72
  jc:     cjumps 72
  jae:    cjumps 73
  jnb:    cjumps 73
  jnc:    cjumps 73
  je:     cjumps 74
  jz:     cjumps 74
  jne:    cjumps 75
  jnz:    cjumps 75
  jbe:    cjumps 76
  jna:    cjumps 76
  ja:     cjumps 77
  jnbe:   cjumps 77
  js:     cjumps 78
  jns:    cjumps 79
  jp:     cjumps 7a
  jpe:    cjumps 7a
  jnp:    cjumps 7b
  jpo:    cjumps 7b
  jl:     cjumps 7c
  jge:    cjumps 7d
  jnl:    cjumps 7d
  jle:    cjumps 7e
  jng:    cjumps 7e
  jg:     cjumps 7f
  jnle:   cjumps 7f

  add:    addsub 00
  or:     addsub 01
  adc:    addsub 02
  sbb:    addsub 03
  and:    addsub 04
  sub:    addsub 05
  xor:    addsub 06
  cmp:    addsub 07

  rol:    shlshr 00
  ror:    shlshr 01
  rcl:    shlshr 02
  rcr:    shlshr 03
  sal:    shlshr 04
  shl:    shlshr 04
  shr:    shlshr 05
  sar:    shlshr 07

  not:    divmul 02
  neg:    divmul 03
  mul:    divmul 04
  div:    divmul 06
  idiv:   divmul 07

  inc:    incdec 00
  dec:    incdec 01

  sldt:   load0m 00
  str:    load0r 01
  lldt:   load0r 02
  ltr:    load0r 03
  verr:   load0r 04
  verw:   load0r 05
  sgdt:   load1r 00
  sidt:   load1r 01
  lgdt:   load1m 02
  lidt:   load1m 03
  smsw:   load1r 04
  lmsw:   load1r 06

  movzx:  movxsz 00
  movsx:  movxsz 08

  bound:  memory 62
  lea:    memory 8d
  les:    memory c4
  lds:    memory c5
  lar:    extmem 02
  lsl:    extmem 03
  lss:    extmem b2
  lfs:    extmem b4
  lgs:    extmem b5
  bsf:    extmem bc
  bsr:    extmem bd

  bswap:  extreg c8

  bt:     bitset 04
  bts:    bitset 05
  btr:    bitset 06
  btc:    bitset 07

  aam:    aamaad d4
  aad:    aamaad d5

  ret:    return c2
  retf:   return ca

  lcall:  ljump  03
  ljmp:   ljump  05
  jmp:    jmp
  call:   call

  enter:  enter
  in:     in
  out:    out
  imul:   imul
  test:   test
  mov:    mov
  xchg:   xchg
  push:   push
  pop:    pop
  seg:    seg
  int:    int
  sys:    sys
  cmpxchg: cmpxchg
